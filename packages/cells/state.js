/*

Legacy state providing Cells API (interface)

Provides two base object prototypes (classes): CellGrid and Cell
It's a fake DetailState, can not be cloned properly (because it references
global objects).

It partially implements other interfaces like HeightMap, States etc
these props will be reachable via Cell object.
*/

export const protoCell = {
  help: "Cell is a object representing smallest unit of area storing "
        "different properties like height, humidity, population etc.",

  id: undefined, // cell identifier, must be defined
  get height() { return pack.cells.h[this.id] },
  get biome() { return pack.cells.biome[this.id] },
  get burg() { return pack.cells.burg[this.id] },

}

export const CellGrid = {
    help: "CellGrid is a set of Cells providing several operations above "
          "the set like map, filter, mapOn",

    protoCell: protoCell, // prototype for all Cell objects generated by the Grid
    cells: pack.cells, // <-- !!! global ref

    map(f) {
      return this.cells.map(c => f(Object.create(protoCell, {id: c})))
    },

    filter(f) {
      return this.cells.filter(f => f(Object.create(protoCell, {id: c})))
    },



    mapOn(prop, f):

    // filter values by f in the first ring around centerId,
    // if it's empty use the next ring and so on up tu max
    findNearest: (f, max=3) => centerId => {
      if (max<1) return [];
      const used = new Set([centerId]);
      const propers = id => cells.c[id].filter(c=>!used.has(c).filter(f)
      const ring = Array.isArray(centerId)
        ? centerId.map(c => propers(c)).flat();
        : propers(centerId);
      if (ring.length) return valid;
      return findNearest(f, max-1)(ring)
    },


}
